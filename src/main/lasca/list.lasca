data List a = Nil | Cons(head: a, tail: List a)
data Box a = Box(i: a) -- remove this when lambda boxing issue is fixed

def empty(l) = match l {
    Nil -> true
    Cons(_, _) -> false
}

def foldl(self: List a, z: b, f: a -> b -> b): b = match self {
    Nil -> z
    Cons(hd, tl) -> foldl(tl, f(hd, z), f)
}

def foldr(self: List a, z: b, f: a -> b -> b): b = match self {
    Nil -> z
    Cons(hd, tl) -> f(hd, foldr(tl, z, f))
}

def lengthInner(e, acc) = Box(acc.i + 1) -- remove this when lambda boxing issue is fixed

def length(l) = foldl(l, Box(0), lengthInner).i -- remove this when lambda boxing issue is fixed

def main() = {
    list = Cons("Two", Cons("One", Nil));
    len = list.length;
    tes = {t -> println("Test")};
    println("Hello world! ${list.head}. Is empty: ${list.empty}, length = ${len.toString}");
}