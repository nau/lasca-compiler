Pi = 3.141592653589793
SolarMass = 4.0 * Pi * Pi
DaysPerYear = 365.24

data Body = Body(x: Float, y: Float, z: Float, vx: Float, vy: Float, vz: Float, mass: Float)

Jupiter = Body(
     4.84143144246472090e+00,                  -- x
    -1.16032004402742839e+00,                  -- y
    -1.03622044471123109e-01,                  -- z
     1.66007664274403694e-03 * DaysPerYear,    -- vx
     7.69901118419740425e-03 * DaysPerYear,    -- vy
    -6.90460016972063023e-05 * DaysPerYear,    -- vz
     9.54791938424326609e-04 * SolarMass       -- mass
)

Saturn = Body(
     8.34336671824457987e+00,
     4.12479856412430479e+00,
    -4.03523417114321381e-01,
    -2.76742510726862411e-03 * DaysPerYear,
     4.99852801234917238e-03 * DaysPerYear,
     2.30417297573763929e-05 * DaysPerYear,
     2.85885980666130812e-04 * SolarMass
)

Uranus = Body(
     1.28943695621391310e+01,
    -1.51111514016986312e+01,
    -2.23307578892655734e-01,
     2.96460137564761618e-03 * DaysPerYear,
     2.37847173959480950e-03 * DaysPerYear,
    -2.96589568540237556e-05 * DaysPerYear,
     4.36624404335156298e-05 * SolarMass
)

Neptune = Body(
     1.53796971148509165e+01,
    -2.59193146099879641e+01,
     1.79258772950371181e-01,
     2.68067772490389322e-03 * DaysPerYear,
     1.62824170038242295e-03 * DaysPerYear,
    -9.51592254519715870e-05 * DaysPerYear,
     5.15138902046611451e-05 * SolarMass
)

Sun = Body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SolarMass)

def go(bodies: [Body], i, pxyz: [Float]) = {
    body = bodies[i];
    updatedPs = [
        pxyz[0] + body.vx * body.mass,
        pxyz[1] + body.vy * body.mass,
        pxyz[2] + body.vz * body.mass
    ];
    if i == 0 then updatedPs else go(bodies, i - 1, updatedPs)
}


def offsetMomentum(object, px, py, pz) = {
    vx = -px / SolarMass;
    vy = -py / SolarMass;
    vz = -pz / SolarMass;
    Body(object.x, object.y, object.z, vx, vy, vz, object.mass)
}

def init(bodies: [Body]) = {
    len = arrayLength(bodies);
    pxyzInit = [0.0, 0.0, 0.0];
    offsets = go(bodies, len - 1, pxyzInit);
    sun = offsetMomentum(bodies[0], offsets[0], offsets[1], offsets[2]);
    [sun, bodies[1], bodies[2], bodies[3], bodies[4]]
}

def advanceInner(from, to, dt) = {
    dx = from.x - to.x;
    dy = from.y - to.y;
    dz = from.z - to.z;
    dSquared = dx * dx + dy * dy + dz * dz;
    distance = sqrt(dSquared);
    mag = dt / (dSquared * distance);
    toMass = to.mass;
    fromMass = from.mass;
    toMassMag = toMass * mag;
    fromMassMag = fromMass * mag;
    fromVx = from.vx - dx * toMassMag;
    fromVy = from.vy - dy * toMassMag;
    fromVz = from.vz - dz * toMassMag;
    toVx   = to.vx   + dx * fromMassMag;
    toVy   = to.vy   + dy * fromMassMag;
    toVz   = to.vz   + dz * fromMassMag;
    [
      Body(from.x, from.y, from.z, fromVx, fromVy, fromVz, fromMass),
      Body(to.x, to.y, to.z, toVx, toVy, toVz, toMass)
    ]
}

def updateIdx(bodies: [Body], i, j, from: Body, to: Body) = [
    if i == 0 then from else if j == 0 then to else bodies[0],
    if i == 1 then from else if j == 1 then to else bodies[1],
    if i == 2 then from else if j == 2 then to else bodies[2],
    if i == 3 then from else if j == 3 then to else bodies[3],
    if i == 4 then from else if j == 4 then to else bodies[4]
]

def loop2(bodies: [Body], i: Int, j: Int, dt: Float) =
    if j < 5 then {
        res = advanceInner(bodies[i], bodies[j], dt);
        newBodies = updateIdx(bodies, i, j, res[0], res[1]);
        loop2(newBodies, i, j + 1, dt);
    } else bodies

def loop1(bodies, i, dt) =
    if i < 5 then {
        res = loop2(bodies, i, i + 1, dt);
        loop1(res, i + 1, dt);
    } else bodies

def update(body: Body, dt: Float) = Body(
    body.x + dt * body.vx, body.y + dt * body.vy, body.z + dt * body.vz,
    body.vx, body.vy, body.vz, body.mass)

def advance(bodies: [Body], dt) = {
    bodies1 = loop1(bodies, 0, dt); -- FIXME
    [
      update(bodies1[0], dt),
      update(bodies1[1], dt),
      update(bodies1[2], dt),
      update(bodies1[3], dt),
      update(bodies1[4], dt)
    ]
}

def squared(x: Float, y: Float, z: Float) = x * x + y * y + z * z

def energyInner(from, to) = {
    dx = from.x - to.x;
    dy = from.y - to.y;
    dz = from.z - to.z;
    distance = sqrt(squared(dx, dy, dz));
    from.mass * to.mass / distance;
}

def energy(bodies: [Body]) = {
    sun = bodies[0];
    jupiter = bodies[1];
    saturn = bodies[2];
    uranus = bodies[3];
    neptune = bodies[4];

    -- Those are not variable reassignment, but shadowing instead, like in OCaml
    e =     0.5 * sun.mass     * squared(sun.vx, sun.vy, sun.vz);
    e = e + 0.5 * jupiter.mass * squared(jupiter.vx, jupiter.vy, jupiter.vz);
    e = e + 0.5 * saturn.mass  * squared(saturn.vx, saturn.vy, saturn.vz);
    e = e + 0.5 * uranus.mass  * squared(uranus.vx, uranus.vy, uranus.vz);
    e = e + 0.5 * neptune.mass * squared(neptune.vx, neptune.vy, neptune.vz);

    e = e - energyInner(bodies[0], bodies[1]);
    e = e - energyInner(bodies[0], bodies[2]);
    e = e - energyInner(bodies[0], bodies[3]);
    e = e - energyInner(bodies[0], bodies[4]);

    e = e - energyInner(bodies[1], bodies[2]);
    e = e - energyInner(bodies[1], bodies[3]);
    e = e - energyInner(bodies[1], bodies[4]);

    e = e - energyInner(bodies[2], bodies[3]);
    e = e - energyInner(bodies[2], bodies[4]);

    e = e - energyInner(bodies[3], bodies[4]);

    e
}

def calculate(bodies: [Body], i) = if i > 0 then calculate(advance(bodies, 0.01), i - 1) else bodies

def main() = {
    -- set to 50000000 for real benchmark
    args = getArgs();
    numIterations = toInt(args[1]);
    bodies = [Sun, Jupiter, Saturn, Uranus, Neptune];
    initedBodies = bodies.init;
    println(initedBodies.energy.toString);
    advanced = calculate(initedBodies, numIterations);
    println(energy(advanced).toString);
}
