import Array

{-
    Strings are UTF-8 encoded.
    `Char` means Unicode Code Point.
-}

-- length of UTF-8 encoded byte string
extern def bytesCount(s: String): Int = "bytesLength"
extern def graphemeCount(s: String): Int = "graphemesLength"
extern def chr(codePoint: Int): String = "codePointToString"
extern def fromCharArray(chars: Array Int): String = "codePointsToString"
extern def charToLower(codePoint: Int): Int = "utf8proc_tolower"
extern def charToUpper(codePoint: Int): Int = "utf8proc_toupper"
extern def charToTitle(codePoint: Int): Int = "utf8proc_totitle"
{-
    http://unicode.org/glossary/#unicode_scalar_value 
    Any Unicode code point except high-surrogate and low-surrogate code points. 
    In other words, the ranges of integers 0 to D7FF16 and E00016 to 10FFFF16 inclusive.
-}
extern def isValidUnicodeScalar(codePoint: Int): Bool = "utf8proc_codepoint_valid"
extern def iterate(s: String, f: Int -> Bool): Unit = "codePointsIterate"

{- 
    Regular Expression stuff. Lasca uses PCRE2 library internally.
-}
data Pattern

extern def compilePattern(pattern: String): Pattern = "lascaCompileRegex"
extern def matchRegex(pattern: Pattern, str: String): Bool = "lascaMatchRegex"
extern def regexReplace(pattern: Pattern, str: String, replacement: String): String = "lascaRegexReplace"

def replace(heystack: String, needle: String, replacement: String) = {
    p = compilePattern(needle);
    regexReplace(p, heystack, replacement)
}

def startsWith(s: String, prefix: String): Bool = {
    -- FIXME: write decent implementation
    p = compilePattern("^${prefix}.*");
    matchRegex(p, s);
}

def endsWith(s: String, suffix: String): Bool = {
    -- FIXME: write decent implementation
    p = compilePattern(".*${suffix}\$");
    matchRegex(p, s);
}

def foreach(s: String, f: Int -> a): Unit = iterate(s, { char -> f(char); true })

def codePointAt(s: String, index: Int): Int = {
    var i = 0;
    var result = -1;
    iterate(s, { char -> 
        if i.getRef < index then {
            i := i.getRef + 1;
            true;
        }
        else {
            result := char;
            false;
        }
    });
    if result.getRef == -1 then die("Index is out of range: ${index}") else result.getRef;
}

def ord(s: String) = codePointAt(s, 0)

def foldl(s: String, zero: a, f: a -> Int -> a): a = {
    var acc = zero;
    iterate(s, { char -> acc := f(acc.getRef, char); true });
    acc.getRef
}

def codePointCount(s: String): Int = foldl(s, 0, { len, c -> len + 1})

def compareLength(s: String, length: Int): Int = {
    var i = 0;
    var result = 0;
    iterate(s, { char -> 
        i := i.getRef + 1;
        i.getRef <= length
    });
    runtimeCompare(i.getRef, length);
}

def length(s) = codePointCount(s)

def codePoints(s: String): Array Int = {
    array = makeArray(s.codePointCount, 0);
    foldl(s, 0, { idx, char -> setIndex(array, idx, char); idx + 1 });
    array;
}

def map(s: String, f: Int -> Int): String = {
    array = s.codePoints;
    transform(array, { i, cp -> f(cp) });
    fromCharArray(array);
}

def toLower(s: String): String = if compareLength(s, 1) == 0 then chr(charToLower(ord(s))) else map(s, charToLower)

def toUpper(s: String): String = if compareLength(s, 1) == 0 then chr(charToUpper(ord(s))) else map(s, charToUpper)

def toTitle(s: String): String = if compareLength(s, 1) == 0 then chr(charToTitle(ord(s))) else map(s, charToTitle)

def capitalize(s: String): String = match compareLength(s, 1) {
    -1 -> s -- empty string
    0 -> chr(charToUpper(ord(s))) -- toUpper a single code point
    _ -> {
        array = s.codePoints;
        setIndex(array, 0, charToUpper(getIndex(array, 0)));
        fromCharArray(array);
    }
}

def main() = {
    empty = "";
    test = "Teástuͤ";
    symbol = "uͤ";
    upperT = "T";
    lowerA = "å";
    asdf = "aßdƒ";
    println(toString(codePointAt(test, 0)));
    println(toString(codePointAt(test, 6)));
    String.foreach(test, { cp -> println(cp.toString) });
    println(toString(codePoints(test)));
    println(toString(symbol.ord));
    println("length in codepoints = ${codePointCount(test)}, length in bytes = ${bytesCount(test)}, length in graphemes = ${graphemeCount(test)}");
    res = foldl("12345", 0, { acc, c -> acc + toInt(chr(c)); });
    println(res.toString);
    println("toLower T = ${chr(charToLower(ord(upperT)))} ${toLower(test)}");
    println("toUpper å = ${chr(charToUpper(ord(lowerA)))} ${toUpper(test)}");
    println("toTitle å = ${chr(charToTitle(ord(lowerA)))} ${toTitle(test)}");
    println("capitalize ${capitalize(empty)} ${capitalize(lowerA)} ${capitalize(test)} ${capitalize(asdf)}");
    println("compare ${compareLength(empty, 1)} ${compareLength(empty, 0)} ${compareLength(empty, -1)} ${compareLength(test, 10)} ${compareLength(test, 7)} ${compareLength(test, 0)}");
    println("replace ${replace(test, symbol, upperT)}");
    println("${test} startsWith ${upperT}: ${startsWith(test, upperT)}, endsWith ${symbol}: ${endsWith(test, symbol)}");
    println("${test} startsWith ${symbol}: ${startsWith(test, symbol)}, endsWith ${upperT}: ${endsWith(test, upperT)}");
    println("Code point 123 is valid Unicode Scalar: ${isValidUnicodeScalar(123)}");
    println("Surrogate code point 55296 is valid Unicode Scalar: ${isValidUnicodeScalar(55296)}");
    println("Code point 1114112 is valid Unicode Scalar: ${isValidUnicodeScalar(1114112)}");
}
