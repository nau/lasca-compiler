module Prelude

extern def putchard(x: Float): Unit = "putchard"
extern def putInt(d: Int): Unit = "putInt"
extern def runtimePutchar(d: Int): Unit = "runtimePutchar"
extern def println(s: String): Unit = "println"
extern def makeArray(size: Int, init: a): Array a = "makeArray"
extern def arrayAppend(first: Array a, second: Array a): Array a = "arrayAppend"
extern def arrayCopy(src: Array a, srcPos: Int, dest: Array a, destPos: Int, length: Int): Unit = "arrayCopy"
extern def arrayApply(array: Array a, i: Int): a = "arrayApply"
extern def arrayLength(array: Array a): Int = "arrayLength"
extern def toString(a: a): String = "toString"
extern def sqrt(a: Float): Float = "sqrt"
extern def getArgs(): Array String = "getArgs"
extern def toInt(s: String): Int = "toInt"
extern def codepointsLength(s: String): Int = "codepointsLength"
extern def graphemesLength(s: String): Int = "graphemesLength"
extern def unicodePoints(s: String): Array Int = "unicodePoints"
extern def codePointAt(s: String, index: Int): Int = "codePointAt"
extern def concat(strings: Array String): String = "concat"
extern def die(msg: String): a = "die"
extern def runtimeIsConstr(constr: a, name: String): Bool = "runtimeIsConstr"
extern def runtimeCheckTag(value: a, tag: Int): Bool = "runtimeCheckTag"
extern def runtimeCompare(lhs: a, rhs: a): Int = "runtimeCompare"

extern def intToByte(i: Int): Byte = "intToByte"
extern def byteToInt(i: Byte): Int = "byteToInt"

data Ref a = Ref(getRef: a)

data FileHandle
data Pattern

extern def compilePattern(pattern: String): Pattern = "lascaCompileRegex"
extern def matchRegex(pattern: Pattern, str: String): Pattern = "lascaMatchRegex"
extern def regexReplace(pattern: Pattern, str: String, replacement: String): String = "lascaRegexReplace"

extern def openFile(filename: String, mode: String): FileHandle = "lascaOpenFile"
extern def readFile(filename: String): String = "lascaReadFile"
extern def writeFile(filename: String, string: String): Unit = "lascaWriteFile"

extern def updateRef(ref: Ref a, value: a): Ref a = "updateRef"