import Array

Pi = 3.141592653589793
SolarMass = 4.0 * Pi * Pi
DaysPerYear = 365.24

data Body = Body(x: Var Float, y: Var Float, z: Var Float, vx: Var Float, vy: Var Float, vz: Var Float, mass: Float)

def body(x, y, z, vx, vy, vz, mass) = Body(Var(x), Var(y), Var(z), Var(vx), Var(vy), Var(vz), mass)

Jupiter = body(
     4.84143144246472090e+00,                  -- x
    -1.16032004402742839e+00,                  -- y
    -1.03622044471123109e-01,                  -- z
     1.66007664274403694e-03 * DaysPerYear,    -- vx
     7.69901118419740425e-03 * DaysPerYear,    -- vy
    -6.90460016972063023e-05 * DaysPerYear,    -- vz
     9.54791938424326609e-04 * SolarMass,      -- mass
)

Saturn = body(
     8.34336671824457987e+00,
     4.12479856412430479e+00,
    -4.03523417114321381e-01,
    -2.76742510726862411e-03 * DaysPerYear,
     4.99852801234917238e-03 * DaysPerYear,
     2.30417297573763929e-05 * DaysPerYear,
     2.85885980666130812e-04 * SolarMass,
)

Uranus = body(
     1.28943695621391310e+01,
    -1.51111514016986312e+01,
    -2.23307578892655734e-01,
     2.96460137564761618e-03 * DaysPerYear,
     2.37847173959480950e-03 * DaysPerYear,
    -2.96589568540237556e-05 * DaysPerYear,
     4.36624404335156298e-05 * SolarMass,
)

Neptune = body(
     1.53796971148509165e+01,
    -2.59193146099879641e+01,
     1.79258772950371181e-01,
     2.68067772490389322e-03 * DaysPerYear,
     1.62824170038242295e-03 * DaysPerYear,
    -9.51592254519715870e-05 * DaysPerYear,
     5.15138902046611451e-05 * SolarMass,
)

Sun = body(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, SolarMass)

def for(start: Int, end: Int, f: Int -> a) = {
    if start < end then {
        f(start);
        for(start + 1, end, f);
    } else 0;
}

def offsetMomentum(bodies: [Body]) = {
    var px = 0.0;
    var py = 0.0;
    var pz = 0.0;
    for(0, 5, { i ->
        ibody = bodies[i];
        m = ibody.mass;
        px := px.readVar + ibody.vx.readVar * m;
        py := py.readVar + ibody.vy.readVar * m;
        pz := pz.readVar + ibody.vz.readVar * m;
    });
    object = bodies[0];
    object.vx := -px.readVar / SolarMass;
    object.vy := -py.readVar / SolarMass;
    object.vz := -pz.readVar / SolarMass;
}

def squared(x: Float, y: Float, z: Float) = x * x + y * y + z * z

def advance(bodies: [Body], dt) = {
    for(0, 5 - 1, { i ->
        ibody = bodies[i];
        imass = ibody.mass;
        for(i + 1, 5, { j ->
            jbody = bodies[j];
            dx = ibody.x.readVar - jbody.x.readVar;
            dy = ibody.y.readVar - jbody.y.readVar;
            dz = ibody.z.readVar - jbody.z.readVar;
            dSquared = squared(dx, dy, dz);
            distance = sqrt(dSquared);
            mag = dt / (dSquared * distance);
            jmass = jbody.mass;
            ibody.vx := ibody.vx.readVar - dx * jmass * mag;
            ibody.vy := ibody.vy.readVar - dy * jmass * mag;
            ibody.vz := ibody.vz.readVar - dz * jmass * mag;

            jbody.vx := jbody.vx.readVar + dx * imass * mag;
            jbody.vy := jbody.vy.readVar + dy * imass * mag;
            jbody.vz := jbody.vz.readVar + dz * imass * mag;
        });
    });
    for(0, 5, { i ->
        body = bodies[i];
        body.x := body.x.readVar + dt * body.vx.readVar;
        body.y := body.y.readVar + dt * body.vy.readVar;
        body.z := body.z.readVar + dt * body.vz.readVar;
    });
    bodies
}

def energy(bodies: [Body]) = {
    var e = 0.0;
    for(0, 5, { i ->
        body = bodies[i];
        e := e.readVar + 0.5 * body.mass * squared(body.vx.readVar, body.vy.readVar, body.vz.readVar);
        for(i + 1, 5, { j ->
            from  = bodies[i];
            to    = bodies[j];
            dx = from.x.readVar - to.x.readVar;
            dy = from.y.readVar - to.y.readVar;
            dz = from.z.readVar - to.z.readVar;
            distance = sqrt(squared(dx, dy, dz));
            e := e.readVar - from.mass * to.mass / distance;
        });
    });
    e.readVar
}

def calculate(bodies: [Body], i) = if i > 0 then calculate(advance(bodies, 0.01), i - 1) else bodies

def main() = {
    -- set to 50000000 for real benchmark
    args = getArgs();
    numIterations = toInt(args[1]);
    bodies = [Sun, Jupiter, Saturn, Uranus, Neptune];
    bodies.offsetMomentum;
    println(bodies.energy.toString);
    calculate(bodies, numIterations);
    println(toString(energy(bodies)));
}
