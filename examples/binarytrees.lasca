{-
    The Computer Language Benchmarks Game
    http://benchmarksgame.alioth.debian.org/
-}
data Tree a = Empty | Node(treeLeft: Tree a, treeRight: Tree a)

def make(d) =
    if d == 0 then Node(Empty, Empty)
    else let d = d - 1 in Node(make(d), make(d))

def check(t) = match t {
    Empty -> 0
    Node(l, r) -> 1 + check(l) + check(r)
}

minDepth = 4
maxDepth = {
    args = getArgs();
    if arrayLength(args) != 2 then 21 else toInt(args[1])
}
stretchDepth = maxDepth + 1

def pow(n) = if n == 0 then 1 else 2 * pow(n-1)

def main() = {
    def loop1(d, i) = if i < ((maxDepth - d) / 2 + 1) then {
        def loop2(d, i, niter, c) =
            if i == niter then c else loop2(d, i + 1, niter, c + check(make(d)));
        dd = d + i * 2;
        niter = pow(maxDepth - dd + minDepth);
        c = loop2(dd, 0, niter, 0);
        println("${niter}\t trees of depth ${d}\t check: ${c}");
        loop1(d, i + 1);
    } else 0;

    c = check(make(stretchDepth));
    println("stretch tree of depth ${stretchDepth}\t check: ${c}");
    longLivedTree = make(maxDepth);
    loop1(minDepth, 0);
    println("long lived tree of depth ${maxDepth}\t check: ${check(longLivedTree)}");
}
