import Bits

def testLiterals() = {
    a = 1234567890;
    b = -1234567890;
    c = true;
    d = false;
    e = 123.456;
    f = -123.45e-5;
    g = intToByte(127);
    h = intToByte(-128);
    i = "String";
    j = ();
    l = [1, 2];
    println("${a} ${b} ${c} ${d} \$${e} ${f} ${g} ${h} ${i} ${j} ${l}");
}

def bitwiseOperations() = {
    a = intAnd(5, 4); println(a.toString);
    a = intAnd(5, 2); println(a.toString);
    a = intOr(4, 1); println(a.toString);
    a = intXor(3, 3); println(a.toString);
    a = intShiftL(3, 3); println(a.toString);
    a = intShiftL(1, 63); println(a.toString);
    a = intShiftR(4611686018427387904, 62); println(a.toString);
    a = intNot(0); println(a.toString);
    a = intPopCount(9223372036854775807); println(a.toString);
    a = intPopCount(-1); println(a.toString);

    a = byteAnd(intToByte(5), intToByte(4)); println(a.toString);
    a = byteAnd(intToByte(5), intToByte(2)); println(a.toString);
    a = byteOr(intToByte(4), intToByte(1)); println(a.toString);
    a = byteXor(intToByte(3), intToByte(3)); println(a.toString);
    a = byteShiftL(intToByte(1), intToByte(7)); println(a.toString);
    a = byteNot(intToByte(0)); println(a.toString);
}

def logicalOperations() = {
    a = true and false; println(a.toString);
    a = true or false; println(a.toString);
    a = not false; println(a.toString);
    a = not false and false or true; println(a.toString);
}

def innerFunctions() = {
    a = 3;
    def inner1(x) = x + a; -- check capturing outer vars
    println("${inner1(2)}");

    def inner2(x) = {
        inner2 = 1;
        x + 5 + inner2; -- check shadowing
    };
    println("${inner2(10)}");

    def inner3(x) = if x == 0 then 0 else {
        println(toString(x));
        inner3(x - 1); -- inner recursive
    };
    inner3(3);
}

def main() = {
    testLiterals();
    bitwiseOperations();
    logicalOperations();
    innerFunctions();
}