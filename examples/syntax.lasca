-- Records
-- Dynamic mode
data Point(x, y)

data Point(x: Int, y: Int)
data Point(a)(x: a, y: a)
data Point(a) { x: a, y: a }
data Point(a)

-- ADTs/GADTs
data List(a) = Nil | Cons(head: a, tail: List(a))
type List(a) = Nil | Cons(head: a, tail: List(a))
type List(a) = Nil | Cons { head: a, tail: List(a) }

-- GADT
data Expr(a) = Unit: Expr(a) | Iadd (l: Int, r: Int): Expr(Int) | Isub (l: Int, r: Int): Expr(Int)

-- Traits/Interfaces/Type classes
trait Functor(F) {
    -- pure
	def map(c: F(a), f: a => b): F(b)
}

instance Functor(List) {
    -- pure, O(c.size), total
    def map(c, f) = {
      | (Nil, f) => Nil
      | (x::xs, f) => Cons(f(x), xs.map(f))
      | (x::xs, f) => Cons(f x, xs.map f)
      | (x::xs, f) => Cons (f x) (xs.map f)
    }
}

-- Documentation
"""
Effect: IO(String)
Example
> val s = genString
> assert (s.size == 10)
"""
def genString: String = rand.randomString 10

def map(a: Type, b: Type)(list: List(a), f: a => b): List(b)
map(Int, String)(list, _.toString)
map (Int, String) list toString
def map(list: [a], f: a -> b): [b]
def map(list: List[a], f: a -> b): List[b]
def map(list: List[a], f: a => b): List[b]

--  Documentation
--  pure, assert list.size >= 0
def map: [b] = { (list: [a], f: a => b) =>
}

def main = {
-- if
    if 0 <= idx < 10 and array(idx) > 0 then a else b
    if true then dostuff() <=> if true then { dostuff(); () } else ()
-- Streams, Lists, List comprehension
    list = [1, 2, 3]
    list = [x | x <- 1..10 if x < 3, y <- 1..20 if y - x > 0]
-- Lambda
    func = { () => 1 }
    func = { () => 1 }
    func = { () -> 1 }
    func = { -> 1 }
	func = { x => x + 1 }
	func = { x -> x + 1 }
	func = { (x, y) => x + y }
	func = { (x, y) -> x + y }
	hof = list.map { _ + 1 } <=> map list { x => x + 1}
	hof = list.map { x => x + 1 }
	hof = list.collect { (x, y) => x + y }
	func = x => { x + 1 }
-- Map literal
    a = "a"
    one = 1
	dict  = { a: one, "a": 1, "b": 2 }
	dict2 = [ a = one, "a" = 1, "b" = 2, "c" = 3 ]
	dict2 = [ a = one | (a, one) <- genTuples if a > one ]
	dict2 = Map [ a = one | (a, one) <- genTuples if a > one ]
	dict2 = [ a: one, "a" : 1, "b" => 2, "c" => 3 ]
	dict  = { a => one, "a" => 1, "b" => 2, "c" => 3 }
	dict2 = [ a => one, "a" => 1, "b" => 2, "c" => 3 ]
	dict3 = Map [ (a, one), ("a", 1), ("b", 2), ("c", 3) ] -- Haskell-like. Most reasonable
-- Pattern matching
	patmat = array match {
	  a: Int => false
	  [1, 2, 3] => true
	  Cons(x, _) =>
	  {k: v, _} => false
	  r@ 1..3 => true
	  1 | 2 | 3 => true
	  x if x > 0 => false
	}

-- Chaining comparisons (Julia, Python)
   1 < 2 <= 2 < 3 == 3 > 2 >= 1 == 1 < 3 != 5


-- Everything is {}
-- Lambda
   lam = { x => x + 1 }
   patLambda = { (Context x _) value => value + x }
   patMat = match {
   	 | (Context x None)   value          => value + x
   	 | (Context _ Some(y) value if y > 0 => value + y
   	 | (Context _ Some(y) value          => value + y + 1
   }
-- do block
  list = [1 .. 3]
	doubled = do { i <- list; pure(i * i) } -- [1, 4, 9]
}